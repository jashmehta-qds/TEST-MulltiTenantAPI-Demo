
<#@ include file="../TEST_MulltiTenantAPI_Demo.Entity/TemplateCommon.tt"#>

<#
	var tc = new TemplateCommon();

	//get list of entity classes to use as templates to create controller classes
	List<EnvDTE.CodeClass> transientServiceInjectionsNotExistinStartup = tc.GetMissingTransientServiceInjections("TEST_MulltiTenantAPI_Demo.Entity", "BaseEntity","TEST_MulltiTenantAPI_Demo.Api","Startup", "AddTransient(typeof(EntityService<,>)");
#>
// —————————————— 
// <auto-generated> 
//	This code was auto-generated <#= DateTime.Now #> 
//  T4 template produces Startup additions
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.EntityFrameworkCore;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using TEST_MulltiTenantAPI_Demo.Api;
using TEST_MulltiTenantAPI_Demo.Entity.UnitofWork;
using TEST_MulltiTenantAPI_Demo.Entity.Context;
using TEST_MulltiTenantAPI_Demo.Entity.Repository;
using AutoMapper;
using TEST_MulltiTenantAPI_Demo.Domain.Mapping;
using TEST_MulltiTenantAPI_Demo.Domain.Service;
using System.Net;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Http;
using Serilog;
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json.Serialization;
using Microsoft.OpenApi.Models;
using Microsoft.AspNetCore.Mvc.ApplicationModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.AspNetCore.Mvc.ApiExplorer;


namespace TEST_MulltiTenantAPI_Demo.Api
{

    public partial class Startup
    {
	     // Register new services to DI
        partial void SetAdditionalDIServices(IServiceCollection services)
        {
<#

	foreach(EnvDTE.CodeClass cl in transientServiceInjectionsNotExistinStartup)
	{
	var entityName = cl.Name;
	var entityNamelc = cl.Name.ToLower();
#>
			services.AddTransient(typeof(<#= entityName #>Service<,>), typeof(<#= entityName #>Service<,>));
            services.AddTransient(typeof(<#= entityName #>ServiceAsync<,>), typeof(<#= entityName #>ServiceAsync<,>));
<#
   }
#>
		}
	}
}